use fe::print

pub fn main()
	const name
	mut age = 26

	name = "Adam"
	
	print("Hello {age} year old named {name}!")

	age += 1

	print("Hello {age} year old named {name}!")

	print(test_pure())

	mut name = "Adam"
	test_safe(&mut name)

	test_unknown()

	const name = get_name()
	print("Name fetched: {name}")
	say_hi_to(&name)

	print("all good")
;

pure fn test_pure(): String
	mut created = "tmp"
	
	// this is ok because no external data gets mutated
	test_safe(&mut created)

	return created
;

safe fn test_safe(msg: &mut String)
	// `test_unknown3` calls `print` which is `norm`
	// thus all the calls up that stack require at least `norm`
	// since `test_safe` is `safe`, the below call will fail to compile

	// test_unknown()

	// // // // //

	// writing to mut ref doesn't actually work yet ...
	// interpreter doesn't handle refs properly, just copies the data
	msg = "overwritten"
;

fn test_unknown()
	test_unknown2()
;

fn test_unknown2()
	test_unknown3()
;

fn test_unknown3()
	print("unknown norm 3")
;

pure fn get_name(): String
	return "Adam"
;

norm fn say_hi_to(name: &String)
	print("Hi {name}")
;


